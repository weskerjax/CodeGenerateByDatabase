<#@ template language="C#" inherits="CodeGenerateByDatabase.Templates.TemplateBase" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="CodeGenerateByDatabase.Models" #>
<# 
	string className = TableMeta.Name + "Dao";
	FilePath = TableMeta.NameSpace + ".Dao/Impl/" + className + ".cs";
#>
using Orion.API;
using Orion.API.Extensions;
using Orion.API.Models;
using <#= TableMeta.NameSpace #>.Dao.Database;
using <#= TableMeta.NameSpace #>.Domain;
using <#= TableMeta.NameSpace #>.Domain.Enums;
using System;
using System.Collections.Generic;
using System.Linq;


namespace <#= TableMeta.NameSpace #>.Dao.Impl
{
	/// <summary><#= TableMeta.Description #></summary>
	public class <#= className #> : I<#= className #>
	{
		private <#= DataContextName #> _dc;

		public <#= className #>(<#= DataContextName #> dc)
		{
			_dc = dc;
		}


		//TODO 程式產生未完成
		//public Dictionary<int, string> GetDic(string status = null)
		//{
		//	IQueryable<<#= TableMeta.TableName #>> query = _dc.<#= TableMeta.TableName #>;
		//	query = query.WhereHas(x => x.UseStatus == status);

		//	var items = query.ToDictionary(x => x.<#= TableMeta.PK.Name #>, x => x.<#= TableMeta.Name #>Name);
		//	return items;
		//}


		//TODO 程式產生未完成
		//public Dictionary<string, string> GetStatusItems()
		//{
		//	var items = new Dictionary<string, string>
		//	{
		//		{ "y", "開啟" },
		//		{ "n", "關閉" },
		//	};
		//	return items;
		//}

		private <#= TableMeta.Name #>Domain toDomain(_<#= TableMeta.Name #> data)
		{
			if(data == null) { return null; }

			var domain = new <#= TableMeta.Name #>Domain 
			{
<# foreach(var col in TableMeta.Columns) { #>
				<#= col.Name #> = data.<#= col.Name #>,
<# } #>
			};			

			return domain;
		}




		private IQueryable<_<#= TableMeta.Name #>> getQuery(WhereParams<<#= TableMeta.Name #>Domain> findParam = null)
		{
			IQueryable<_<#= TableMeta.Name #>> query =
				from x in _dc.<#= TableMeta.TableName #>
				select new _<#= TableMeta.Name #>
				{
<# foreach(var col in TableMeta.Columns) { #>
					<#= col.Name #> = x.<#= col.Name #>,
<# } #>
				};


			if (findParam == null) { return query; }

			query = query.WhereBuilder(findParam)
<# foreach(var col in TableMeta.Columns) { #>
				.WhereBind(x => x.<#= col.Name #>,	y => y.<#= col.Name #>)
<# } #>
				.Build();

			return query;
		}




		//TODO 程式產生未完成
		public Pagination<<#= TableMeta.Name #>Domain> GetPagination(WhereParams<<#= TableMeta.Name #>Domain> findParam, PageParams<<#= TableMeta.Name #>Sort?> pageParams)
		{
			IQueryable<_<#= TableMeta.Name #>> query = getQuery(findParam);


			if (pageParams == null) { pageParams = PageParams<<#= TableMeta.Name #>Sort?>.Unlimited(); }

			bool isDesc = pageParams.Descending;
			try
			{
				query = query.OrderBy(pageParams.OrderField, isDesc);
			}
			catch (Exception)
			{
				query = query.OrderBy(x => x.<#= TableMeta.PK.Name #>, isDesc);
			}


			var result = query.AsPagination(pageParams.PageIndex, pageParams.PageSize);
			return result.As(x => toDomain(x));
		}

		

		//TODO 程式產生未完成
		//public List<<#= TableMeta.Name #>Domain> GetList(WhereParams<<#= TableMeta.Name #>Domain> findParam = null)
		//{
		//	IEnumerable<_<#= TableMeta.Name #>> query = getQuery(findParam);
		//
		//	return query.Select(x => toDomain(x)).ToList();
		//}



		//TODO 程式產生未完成
		public <#= TableMeta.Name #>Domain GetById(<#= TableMeta.PK.CodeType #> <#= TableMeta.PK.Variable #>)
		{
			_<#= TableMeta.Name #> data = getQuery().FirstOrDefault(x => x.<#= TableMeta.PK.Name #> == <#= TableMeta.PK.Variable #>);
			if (data == null) { return null; }

			<#= TableMeta.Name #>Domain domain = toDomain(data);

			return domain;
		}



		//TODO 程式產生未完成
		public int Save(<#= TableMeta.Name #>Domain domain)
		{
			var datetimeNow = DateTime.Now;

			<#= TableMeta.TableName #> data;

			if (domain.<#= TableMeta.PK.Name #> > 0)
			{
				data = _dc.<#= TableMeta.TableName #>.FirstOrDefault(x => x.<#= TableMeta.PK.Name #> == domain.<#= TableMeta.PK.Name #>);
				Checker.Has(data, "<#= TableMeta.Description #>不存在無法修改");
			}
			else
			{
				data = new <#= TableMeta.TableName #>
				{
					CreateBy = domain.ModifyBy,
					CreateDate = datetimeNow,
				};
				_dc.<#= TableMeta.TableName #>.InsertOnSubmit(data);
			}


<# foreach(var col in TableMeta.Columns.Where(x => !x.IsPrimaryKey && !(new[] {"CreateBy", "CreateDate", "ModifyBy", "ModifyDate"}).Contains(x.Name) )) { #>
			data.<#= col.Name #> = domain.<#= col.Name #>;
<# } #>

			data.ModifyBy = domain.ModifyBy;
			data.ModifyDate = datetimeNow;

			 

			_dc.SubmitChanges();


			return data.<#= TableMeta.PK.Name #>;
		}




		/*######################################################################*/

		private class _<#= TableMeta.Name #> : <#= TableMeta.TableName #>
		{
		}

	}
	
}
